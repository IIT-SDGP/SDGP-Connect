generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ===================== Enums =====================

// Defines the roles users can have within the platform.
enum Role {
  ADMIN
  MODERATOR
  DEVELOPER
}

// Defines the association types that can be linked to projects.
enum AssociationType {
  PROJECT_TYPE
  PROJECT_DOMAIN
  PROJECT_SDG
  PROJECT_TECH
}

// Defines the different status states a project can be in.
enum ProjectStatusEnum {
  IDEA
  MVP
  RESEARCH
  DEPLOYED
  STARTUP
}

enum ProjectDomainEnum {
  AI
  ML
  AR_VR
  BLOCKCHAIN
  IOT
  HEALTHTECH
  FINTECH
  EDTECH
  AGRITECH
  ECOMMERCE
  SOCIAL
  GAMING
  SECURITY
  DATA_ANALYTICS
  ENTERTAINMENT
  SUSTAINABILITY
}

enum ProjectTypeEnum {
  MOBILE
  WEB
  HARDWARE
  DESKTOP
  WEARABLE
  EXTENSION
}

enum SDGGoalEnum {
  NO_POVERTY
  ZERO_HUNGER
  GOOD_HEALTH
  QUALITY_EDUCATION
  GENDER_EQUALITY
  CLEAN_WATER
  AFFORDABLE_ENERGY
  DECENT_WORK
  INDUSTRY_INNOVATION
  REDUCED_INEQUALITIES
  SUSTAINABLE_CITIES
  RESPONSIBLE_CONSUMPTION
  CLIMATE_ACTION
  LIFE_BELOW_WATER
  LIFE_ON_LAND
  PEACE_JUSTICE
  PARTNERSHIPS
}

enum TechStackEnum {
  REACT
  ANGULAR
  VUE
  NODE
  PYTHON
  DJANGO
  FLASK
  JAVA
  SPRING
  DOTNET
  PHP
  LARAVEL
  ANDROID
  IOS
  FLUTTER
  REACT_NATIVE
  FIREBASE
  AWS
  MONGODB
  MYSQL
  POSTGRESQL
  TENSORFLOW
  PYTORCH
  ARDUINO
  RASPBERRY_PI
  SVELTE
  KOTLIN
  SWIFT
  RUBY
  JAVASCRIPT
  TYPESCRIPT
  C_SHARP
  C_PLUS_PLUS
  C
  

}

enum ProjectApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SocialTypeEnum {
  LINKEDIN
  TWITTER
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TIKTOK
}

// ===================== Models =====================

// Represents users of the platform with specific roles.
model User {
  user_id          String            @id @default(uuid())
  role             Role
  password         String
  name             String            
  // Relations to projects this user has approved/featured/rejected
  approvedProjects ProjectStatus[]   @relation("ApprovedBy")
  rejectedProjects ProjectStatus[]   @relation("RejectedBy")
  featuredProjects ProjectMetadata[] @relation("FeaturedBy")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([user_id], name: "user_id_index")
}

// Stores the basic metadata of projects. Used for quick loading of project information without details.
model ProjectMetadata {
  project_id         String          @id @default(uuid())
  sdgp_year          String
  group_num          String
  title              String
  subtitle           String?
  website            String?
  cover_image        String?
  logo               String?
  featured           Boolean         @default(false)

  // Links to the user who featured this project
  featured_by_userId String?
  featured_by        User?           @relation("FeaturedBy", fields: [featured_by_userId], references: [user_id], onDelete: SetNull)

  // One-to-one relation with extended content
  projectContent     ProjectContent?

  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  @@index([project_id], name: "project_id_index")
  @@index([featured_by_userId], name: "featured_by_index")
}

// Stores the detailed content of projects. This is separated from metadata for efficient fetching.
model ProjectContent {
  // Primary key for content identification
  content_id      String               @id @default(uuid())

  // Links to the parent ProjectMetadata
  metadata_id     String               @unique
  metadata        ProjectMetadata      @relation(fields: [metadata_id], references: [project_id], onDelete: Restrict)

  // Related content sections
  projectDetails  ProjectDetails?      // Contains problem statement, solution, etc.
  status          ProjectStatus?       @relation("ProjectStatusToContent")
  associations    ProjectAssociation[] // Types, domains, SDGs, technologies
  slides          ProjectSlide[]       // Slide contents for the project
  team            ProjectTeam[]        // Team members working on the project
  socialLinks     ProjectSocialLink[]  // Links to social profiles or external resources

  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt

  @@index([metadata_id], map: "project_content_index")
}

// Tracks the status of a project and which user approved it
model ProjectStatus {
  // Primary key matching ProjectContent's content_id
  content_id         String                @id
  status             ProjectStatusEnum
  approved_status    ProjectApprovalStatus @default(PENDING)
  rejected_reason    String?
  approved_at        DateTime?

  // Links to the user who approved/rejected the project
  rejected_by_userId String?
  rejected_by        User?                 @relation("RejectedBy", fields: [rejected_by_userId], references: [user_id], onDelete: SetNull)

  // Links to the user who approved/rejected the project
  approved_by_userId String?
  approved_by        User?                 @relation("ApprovedBy", fields: [approved_by_userId], references: [user_id], onDelete: SetNull)

  // Links to the parent ProjectContent
  content            ProjectContent        @relation("ProjectStatusToContent", fields: [content_id], references: [content_id], onDelete: Restrict)

  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt

  @@index([approved_by_userId], name: "approved_by_index")
}

// Links projects to various categories (type, domain, SDG, tech)
model ProjectAssociation {
  id         String           @id @default(uuid())

  // Links to the parent ProjectContent
  content_id String
  content    ProjectContent   @relation(fields: [content_id], references: [content_id], onDelete: Restrict)

  type       AssociationType
  value      String

  // Enum fields for specific association types
  domain      ProjectDomainEnum?
  projectType ProjectTypeEnum?
  sdgGoal     SDGGoalEnum?
  techStack   TechStackEnum?

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([content_id], map: "project_association_index")
}

// Stores individual slides related to a project
model ProjectSlide {
  id             String         @id @default(uuid())

  // Links to the parent ProjectContent
  content_id     String
  content        ProjectContent @relation(fields: [content_id], references: [content_id], onDelete: Restrict)

  slides_content String

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([content_id], map: "project_slide_index")
}

// Represents team members working on a project
model ProjectTeam {
  member_id     String         @id @default(uuid())

  // Links to the parent ProjectContent
  content_id    String
  content       ProjectContent @relation(fields: [content_id], references: [content_id], onDelete: Restrict)

  name          String
  linkedin_url  String?
  profile_image String?

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([content_id], map: "project_team_index")
}

// Links to external resources or social profiles for projects
model ProjectSocialLink {
  id         String         @id @default(uuid())

  // Links to the parent ProjectContent
  content_id String
  content    ProjectContent @relation(fields: [content_id], references: [content_id], onDelete: Restrict)

  link_name  SocialTypeEnum
  url        String

  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  @@index([content_id], map: "project_social_index")
}

// Contains detailed project descriptions
model ProjectDetails {
  id                String         @id @default(uuid())

  // Links to the parent ProjectContent
  content_id        String         @unique
  content           ProjectContent @relation(fields: [content_id], references: [content_id], onDelete: Restrict)

  problem_statement String         @db.LongText
  solution          String         @db.LongText
  features          String         @db.LongText
  team_email        String
  team_phone        String

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@index([content_id], map: "project_details_index")
}
